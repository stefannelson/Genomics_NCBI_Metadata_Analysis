metadata_df = as.data.frame(metadata_df)
metadata_df$submissiondate[1]
metadata_df = apply(metadata_df, c(1,2), function(x) unlist(x, recursive = TRUE))
colnames(metadata_df)
metadata_df[1,1]
typeof(metadata_df[1,1])
# Required Packages
# for more info, see https://bioconnector.github.io/workshops/r-ncbi.html#entrez_fetch()
library(rentrez)
library(XML)
library(lubridate)
# May be helpful to have NCBI API key as described
# here: https://cran.r-project.org/web/packages/rentrez/vignettes/rentrez_tutorial.html#getting-started-with-the-rentrez
set_entrez_key("11c1de631580da44a5ae812abb5357a3ff09")
Sys.getenv("ENTREZ_KEY")
# We're looking at the assembly database; here are the options for it
# entrez_db_searchable("assembly")
# This does a search query for IDs corresponding to a
# particular type of organism
res = entrez_search(db = "assembly", term = "eucaryotes",
retmax = 99999, use_history = FALSE)
# The summary function takes a bunch of ids in a database, returning all the
# needed metadata to munge!
step = 300
sum = entrez_summary(db = "assembly", id = res$ids[1:(step-1)], always_return_list = FALSE)
for (i in seq(step,length(res$ids), step)) {
print("i:")
print(i)
new = entrez_summary(db = "assembly", id = res$ids[i:(i+step-1)], always_return_list = FALSE)
sum = append(sum, new)
Sys.sleep(0.1)
}
#############################################################################
# Taking the list of list structure down to a data.frame
#############################################################################
metadata_df = as.data.frame(do.call("rbind", sum))
View(metadata_df)
rownames(metadata_df) = NULL
metadata_df$submissiondate
View(sum)
View(metadata_df[[20]][[1]])
metadata_df$submissiondate[1]
typeof(metadata_df$submissiondate[1])
c = unlist(metadata_df$submissiondate)
rm(c)
c = lapply(metadata_df$submissiondate, unlist)
View(c)
c[1]
typeof(c[1])
c = lapply(c, unlist)
typeof(c[1])
unlist(c[1])
typeof(unlist(c[1]))
c
c = sapply(metadata_df$submissiondate)
c = sapply(metadata_df$submissiondate, unlist)
c
metadata_df$submissiondate[1]
unlist(metadata_df$submissiondate[1])
c = lapply(metadata_df$submissiondate, unlist)
View(c)
View(c)
c[1]
d = unlist(c[1])
typeof(d)
c = lapply(metadata_df$submissiondate, function(x) unlist(x, recursive = FALSE, use.names = FALSE))
View(c)
c[1]
c[[1]]
unlist(c)
d = unlist(c)
d
d[1]
metadata_df$submissiondate = unlist(metadata_df$submissiondate)
metadata_df$submissiondate[1]
typeof(metadata_df$submissiondate[1])
for (name in colnames(metadata_df)) {
print(metadata_df$name)
}
for (name in colnames(metadata_df)) {
print(metadata_df[[name]])
}
metadata_df[["submissiondate"]]
for (name in colnames(metadata_df)) {
metadata_df[[name]] = unlist(metadata_df[[name]])
}
colnames(metadata_df)
metadata_df = as.data.frame(do.call("rbind", sum))
rownames(metadata_df) = NULL
metadata_df$synonym
metadata_df$synonym[1]
length(metadata_df$synonym[1])
length(metadata_df$synonym[[1]])
length(metadata_df[["synonym"]][[1]])
for (name in colnames(metadata_df)) {
if (length(metadata_df[[name]][[1]] == 1))
metadata_df[[name]] = unlist(metadata_df[[name]])
}
for (name in colnames(metadata_df)) {
print(name)
if (length(metadata_df[[name]][[1]] == 1))
metadata_df[[name]] = unlist(metadata_df[[name]])
}
metadata_df$gb_bioprojects
metadata_df$gb_bioprojects[1]
length(metadata_df$gb_bioprojects[1])
length(metadata_df$gb_bioprojects[[1]])
for (name in colnames(metadata_df)) {
print(name)
if (length(metadata_df[[name]][[1]] == 1)) {
metadata_df[[name]] = unlist(metadata_df[[name]]) }
}
colnames(metadata_df)
metadata_df$gb_projects
metadata_df$gb_projects[1]
metadata_df$gb_projects[[1]]
length(metadata_df$gb_projects[[1]])
metadata_df = as.data.frame(do.call("rbind", sum))
rownames(metadata_df) = NULL
for (name in colnames(metadata_df)) {
print(name)
if (length(metadata_df[[name]][[1]] == 1)) {
metadata_df[[name]] = unlist(metadata_df[[name]]) }
}
colnames(metadata_df)
metadata_df = as.data.frame(do.call("rbind", sum))
rownames(metadata_df) = NULL
for (name in colnames(metadata_df)) {
print(name)
if (length(metadata_df[[name]][[1]] == 1) | name != "gb_projects") {
metadata_df[[name]] = unlist(metadata_df[[name]]) }
}
metadata_df = as.data.frame(do.call("rbind", sum))
rownames(metadata_df) = NULL
for (name in colnames(metadata_df)) {
print(name)
if (length(metadata_df[[name]][[1]] == 1) | name != "gb_bioprojects") {
metadata_df[[name]] = unlist(metadata_df[[name]]) }
}
metadata_subset = metadata_df %>% select(uid)
library(dplyr)
metadata_subset = metadata_df %>% select(uid)
View(metadata_subset)
colnames(metadata_df)
metadata_subset = metadata_df %>% -select(uid)
metadata_subset = metadata_df %>% select(-uid)
View(metadata_subset)
View(metadata_df)
metadata_subset = metadata_df %>% select(-rsuid, -latestaccession, -synonym,
-ucscname, -ensemblname, -assemblyclass,
-gb_bioprojects, -gb_projects, -rs_bioprojects,
-rs_projects, -biosource, -anomalouslist,
-exclfromrefseq, -propertylist, -fromtype,
-ftppath_assembly_rpt, -ftppath_stats_rpt,
-ftppath_regions_rpt)
View(metadata_subset)
metadata_subset = metadata_df %>% select(-rsuid, -latestaccession, -synonym,
-ucscname, -ensemblname, -assemblyclass,
-gb_bioprojects, -gb_projects, -rs_bioprojects,
-rs_projects, -biosource, -anomalouslist,
-exclfromrefseq, -propertylist, -fromtype,
-ftppath_assembly_rpt, -ftppath_stats_rpt,
-ftppath_regions_rpt, -ftppath_genbank,
-ftppath_refseq, -busco, -meta)
for (name in colnames(metadata_subset)) {
metadata_subset[[name]] = unlist(metadata_subset[[name]])
}
save(metadata_subset, file = "metadata.RData")
metadata_subset = mutate_if(metadata_df, is.Date, funs(dmy))
metadata_subset = mutate_if(metadata_df, is.Date, dmy)
typeof(metadata_subset$submissiondate[1])
metadata_subset$submissiondate[1]
for (name in colnames(metadata_subset)) {
metadata_subset[[name]] = unlist(metadata_subset[[name]])
}
metadata_df = as.data.frame(do.call("rbind", sum))
# Remove column names
rownames(metadata_df) = NULL
# Remove uneeded/empty/unusable columns
metadata_subset = metadata_df %>% select(-rsuid, -latestaccession, -synonym,
-ucscname, -ensemblname, -assemblyclass,
-gb_bioprojects, -gb_projects, -rs_bioprojects,
-rs_projects, -biosource, -anomalouslist,
-exclfromrefseq, -propertylist, -fromtype,
-ftppath_assembly_rpt, -ftppath_stats_rpt,
-ftppath_regions_rpt, -ftppath_genbank,
-ftppath_refseq, -busco, -meta)
# API pull made everything into a list; here's a quick fix
for (name in colnames(metadata_subset)) {
metadata_subset[[name]] = unlist(metadata_subset[[name]])
}
metadata_subset = mutate_if(metadata_subset, is.Date, dmy)
metadata_subset$submissiondate[1]
typeof(metadata_subset$submissiondate[1])
metadata_subset = mutate_if(metadata_subset, is.Date, dmy)
typeof(metadata_subset$submissiondate[1])
metadata_subset$submissiondate[1]
metadata_subset = mutate_if(metadata_subset, is.Date, ymd)
metadata_subset$submissiondate[1]
metadata_subset %>% mutate_if(is.Date, ymd)
metadata_subset = metadata_subset %>% mutate_if(is.Date, ymd)
metadata_subset$submissiondate[1]
metadata_subset$submissiondate = ymd(metadata_subset$submissiondate)
metadata_subset$submissiondate
metadata_df = as.data.frame(do.call("rbind", sum))
# Remove column names
rownames(metadata_df) = NULL
# Remove uneeded/empty/unusable columns
metadata_subset = metadata_df %>% select(-rsuid, -latestaccession, -synonym,
-ucscname, -ensemblname, -assemblyclass,
-gb_bioprojects, -gb_projects, -rs_bioprojects,
-rs_projects, -biosource, -anomalouslist,
-exclfromrefseq, -propertylist, -fromtype,
-ftppath_assembly_rpt, -ftppath_stats_rpt,
-ftppath_regions_rpt, -ftppath_genbank,
-ftppath_refseq, -busco, -meta)
# API pull made everything into a list; here's a quick fix
for (name in colnames(metadata_subset)) {
metadata_subset[[name]] = unlist(metadata_subset[[name]])
}
metadata_subset$submissiondate
metadata_subset$submissiondate = ymd(metadata_subset$submissiondate)
metadata_subset$submissiondate
metadata_df = as.data.frame(do.call("rbind", sum))
# Remove column names
rownames(metadata_df) = NULL
# Remove uneeded/empty/unusable columns
metadata_subset = metadata_df %>% select(-rsuid, -latestaccession, -synonym,
-ucscname, -ensemblname, -assemblyclass,
-gb_bioprojects, -gb_projects, -rs_bioprojects,
-rs_projects, -biosource, -anomalouslist,
-exclfromrefseq, -propertylist, -fromtype,
-ftppath_assembly_rpt, -ftppath_stats_rpt,
-ftppath_regions_rpt, -ftppath_genbank,
-ftppath_refseq, -busco, -meta)
# API pull made everything into a list; here's a quick fix
for (name in colnames(metadata_subset)) {
metadata_subset[[name]] = unlist(metadata_subset[[name]])
}
metadata_subset$submissiondate
ymd("2021/09/24")
parse_date_time(metadata_subset$submissiondate)
ceiling_date("2021/09/24")
is.Date("2021/09/24 00:00")
is.Date("2021/09/24")
is.Date("2021-09-24")
as.Date("2021/09/24 00:00")
as.Date(metadata_subset$submissiondate)
as.Date("hi")
metadata_subset$asmupdatedate = as.Date(metadata_subset$asmupdatedate)
metadata_subset$lastupdatedate = as.Date(metadata_subset$lastupdatedate)
metadata_subset$seqreleasedate = as.Date(metadata_subset$seqreleasedate)
metadata_subset$submissiondate = as.Date(metadata_subset$submissiondate)
metadata_subset$submissiondate[1]
typeof(metadata_subset$submissiondate[1])
unique(metadata_subset$submitterorganization)
save(metadata_subset, file = "metadata.RData")
entrez_db_searchable("taxonomy")
entrez_search(db = "taxonomy", term = "1472224")
entrez_search(db = "taxonomy", term = "1472224")
entrez_fetch(db = "taxonomy", term = "1472224")
entrez_search(db = "taxonomy", term = "1472224")
entrez_db_searchable("taxonomy")
entrez_search(db = "taxonomy", term = "Taxonomy ID: 1472224")
entrez_search(db = "taxonomy", term = "Taxonomy ID")
entrez_search(db = "taxonomy", term = "Sebastiscus tertius")
a= entrez_search(db = "taxonomy", term = "Sebastiscus tertius")
a
a
a$ids
entrez_fetch(db = "taxonomy", id = a$ids)
entrez_fetch(db = "taxonomy", id = a$ids, rettype = xml)
entrez_fetch(db = "taxonomy", id = a$ids, rettype = "XML")
b = entrez_fetch(db = "taxonomy", id = a$ids, rettype = "XML")
b = entrez_fetch(db = "taxonomy", id = a$ids, rettype = "XML", parsed = TRUE)
b = entrez_fetch(db = "taxonomy", id = a$ids, rettype = "xml", parsed = TRUE)
b
library(xml)
library(XML)
b
xmlToList(b)
c=xmlToList(b)
View(c)
c$Taxon$Lineage
View(c)
taxa = entrez_fetch(db = "taxonomy", id = metadata_subset$taxid,
rettype = "xml", parsed = TRUE)
taxa = xmlToList(taxa)
step = 300
taxa = entrez_fetch(db = "taxonomy", id = metadata_subset$taxid[1, (step-1)],
rettype = "xml", parsed = TRUE)
taxa = xmlToList(taxa)
for (i in seq(step,length(metadata_subset$taxid), step)) {
new = entrez_fetch(db = "taxonomy", id = metadata_subset$taxid[i:(i+step-1)],
rettype = "xml", parsed = TRUE)
new = xmlToList(new)
taxa = append(taxa, new)
Sys.sleep(0.1)
}
step = 300
taxa = entrez_fetch(db = "taxonomy", id = metadata_subset$taxid[1, (step-1)],
rettype = "xml", parsed = TRUE)
taxa = xmlToList(taxa)
step = 300
taxa = entrez_fetch(db = "taxonomy", id = metadata_subset$taxid[1:(step-1)],
rettype = "xml", parsed = TRUE)
taxa = xmlToList(taxa)
for (i in seq(step,length(metadata_subset$taxid), step)) {
print(i)
new = entrez_fetch(db = "taxonomy", id = metadata_subset$taxid[i:(i+step-1)],
rettype = "xml", parsed = TRUE)
new = xmlToList(new)
taxa = append(taxa, new)
Sys.sleep(0.1)
}
View(taxa)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = do.call("rbind", taxa)
as.data.frame(
)
taxa_df = as.data.frame(do.call("rbind", taxa))
View(taxa_df)
taxa_df = taxa_df %>% select(TaxId, ScientificName, Division, Lineage)
for (name in colnames(taxa_df)) {
taxa_df[[name]] = unlist(taxa_df[[name]])
}
unlist(taxa_df$TaxId)
unlist(taxa_df$ScientificName)
unlist(taxa_df$Division)
unlist(taxa_df$Lineage)
for (name in colnames(taxa_df)) {
taxa_df[[name]] = unlist(taxa_df[[name]])
}
typeof(taxa_df$TaxId[1])
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>% select(TaxId, ScientificName, Division, Lineage)
for (name in colnames(taxa_df)) {
taxa_df[[name]] = unlist(taxa_df[[name]])
}
typeof(taxa_df$ScientificName[1])
typeof(taxa_df$Division[1])
typeof(taxa_df$Lineage[1])
taxa_df$Division[1]
taxa_df$TaxId = unlist(taxa_df$TaxId)
taxa_df$ScientificName = unlist(taxa_df$ScientificName)
taxa_df$Division = unlist(taxa_df$Division)
taxa_df$Lineage = unlist(taxa_df$Lineage)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, ScientificName, Division, Lineage) %>%
distinct(TaxId)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, ScientificName, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
taxa_df$Lineage[taxa_df$TaxId == 94023]
test = taxa_df[taxa_df$TaxId == 94023]
test = taxa_df$Lineage[taxa_df$TaxId == 94023]
View(test)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
test = taxa_df$TaxId == 94023
test = taxa_df[taxa_df$TaxId == 94023]
table(taxa_df$TaxId)
unique(taxa_df$TaxId)
taxa_df$TaxId
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE) %>%
order_by(TaxId)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE) %>%
arrange(TaxId)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
View(taxa)
taxa[["Taxon"]]
taxa[[1]]
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
taxa_df$Division[[1]]
taxa_df$Division[[2]]
nrows(taxa_df)
nrow(taxa_df)
is.list(taxa_df$Division[[1]])
to_del = c()
for (i in nrow(taxa_df)) {
if (is.list(taxa_df$Division[[i]]) == TRUE) {to_del = c(to_del, i)}
}
taxa_df = taxa_df[-to_del,]
to_del = c()
for (i in nrow(taxa_df)) {
if (is.list(taxa_df$Division[[i]]) == TRUE) {to_del = c(to_del, i)}
}
taxa_df = taxa_df[-to_del,]
to_del = c()
for (i in nrow(taxa_df)) {
if (is.list(taxa_df$Division[[i]]) == TRUE) {to_del = c(to_del, i)}
}
taxa_df = taxa_df[!to_del,]
taxa_df = taxa_df[to_del,]
to_del = c()
for (i in nrow(taxa_df)) {
if (is.list(taxa_df$Division[[i]]) == TRUE) {to_del = c(to_del, i)}
}
taxa_df = taxa_df[to_del,]
to_del = c()
for (i in 1:nrow(taxa_df)) {
if (is.list(taxa_df$Division[[i]]) == TRUE) {to_del = c(to_del, i)}
}
taxa_df = taxa_df[to_del,]
nrow(taxa_df)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
to_del = c()
for (i in 1:nrow(taxa_df)) {
if (is.list(taxa_df$Division[[i]]) == TRUE) {to_del = c(to_del, i)}
}
taxa_df = taxa_df[to_del,]
for (name in colnames(taxa_df)) {
taxa_df[[name]] = unlist(taxa_df[[name]])
}
test = taxa_df[taxa_df$TaxId == 1182532]
test = taxa_df[taxa_df$TaxId == 1182532,]
View(test)
test$Division
test$Lineage
test2 = taxa_df[taxa_df$TaxId == 2759,]
View(test2)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
View(taxa)
length(taxa)
taxa[1]
taxa[[1]]
taxa[[[1]]]
test = taxa[1]
View(test)
test = taxa[[1]]
View(test)
length(test)
for (i in 1:length(taxa)) {
if (length(taxa[[i]] == 12)) {
print(i)
break
}
}
for (i in 1:length(taxa)) {
if (length(taxa[[i]]) == 12) {
print(i)
break
}
}
test = taxa[[75]]
for (i in 1:length(taxa)) {
if (length(taxa[[i]]) == 14) {
print(i)
break
}
}
test2 = taxa[[105]]
View(test)
View(test2)
test2$Properties
del(test2$Properties)
test3 = taxa[[1]]
View(test3)
test2 = test2[row.names(test2) %in% c("Properties", "OtherNames")]
View(test2)
test2 = taxa[[105]]
row.names(test2)
row.names(test2)
names(test2)
test2 = test2[!(names(test2) %in% c("Properties", "OtherNames"))]
View(test2)
test3 = test3[!(names(test3) %in% c("Properties", "OtherNames"))]
save(taxa, file = "temp.RData")
for (i in 1:length(taxa)) {
taxa[[i]] = taxa[[i]][!(names(taxa[[i]]) %in% c("Properties", "OtherNames"))]
}
View(taxa)
taxa_df = as.data.frame(do.call("rbind", taxa))
taxa_df = taxa_df %>%
select(TaxId, Division, Lineage) %>%
distinct(TaxId, .keep_all = TRUE)
for (name in colnames(taxa_df)) {
taxa_df[[name]] = unlist(taxa_df[[name]])
}
View(taxa_df)
save(taxa_df, file = "temp2.RData")
View(metadata_subset)
metadata = left_join(metadata_subset, taxa_df, by = c("taxid" = "TaxId"))
View(metadata)
# Export for visualizations
save(metadata, file = "metadata.RData")
setwd("~/Desktop/Genomics_NCBI_Metadata_Analysis")
save(metadata, file = "metadata.RData")
gc()
load("metadata.RData")
